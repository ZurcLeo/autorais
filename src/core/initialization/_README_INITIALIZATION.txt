# Sistema de Inicializa√ß√£o da Aplica√ß√£o

![Status do Sistema](https://img.shields.io/badge/status-production-green)
![Vers√£o](https://img.shields.io/badge/version-1.0.0-blue)
![Cobertura de Testes](https://img.shields.io/badge/test%20coverage-85%25-yellow)
![Licen√ßa](https://img.shields.io/badge/license-MIT-green)

## üìã Sum√°rio

- [Vis√£o Geral](#-vis√£o-geral)
- [Arquitetura](#-arquitetura)
- [Componentes Principais](#-componentes-principais)
- [Fluxo de Inicializa√ß√£o](#-fluxo-de-inicializa√ß√£o)
- [Diagrama de Sequ√™ncia](#-diagrama-de-sequ√™ncia)
- [Grafo de Depend√™ncias](#-grafo-de-depend√™ncias)
- [Resili√™ncia e Tratamento de Erros](#-resili√™ncia-e-tratamento-de-erros)
- [API](#-api)
- [Guia de Contribui√ß√£o](#-guia-de-contribui√ß√£o)
- [Troubleshooting](#-troubleshooting)

## üåü Vis√£o Geral

O Sistema de Inicializa√ß√£o coordena o carregamento dos servi√ßos cr√≠ticos da aplica√ß√£o respeitando suas depend√™ncias e oferecendo mecanismos de resili√™ncia. Este sistema garante que todos os servi√ßos essenciais estejam prontos antes da intera√ß√£o do usu√°rio, fornecendo feedback visual durante o processo.

### Objetivos

- Gerenciar a ordem de inicializa√ß√£o dos servi√ßos com base em suas depend√™ncias
- Detectar e prevenir ciclos de depend√™ncias
- Fornecer resili√™ncia atrav√©s de mecanismos de retry e timeout
- Mostrar feedback visual do processo de inicializa√ß√£o
- Registrar eventos para monitoramento e depura√ß√£o

## üèó Arquitetura

O sistema √© constru√≠do seguindo os princ√≠pios de:

- **Separation of Concerns (SoC)**: Cada componente tem uma responsabilidade espec√≠fica
- **Reactive Pattern**: Utiliza React Context e Hooks para propaga√ß√£o de estado
- **Dependency Injection**: Configura√ß√£o centralizada de servi√ßos e suas depend√™ncias
- **Resilience Patterns**: Circuit breaker, retries com exponential backoff

### Camadas

| Camada | Descri√ß√£o |
|--------|-----------|
| Core | Sistemas fundamentais necess√°rios para opera√ß√£o da aplica√ß√£o |
| Servi√ßos | Funcionalidades espec√≠ficas que implementam regras de neg√≥cio |
| UI | Componentes de feedback visual durante inicializa√ß√£o |

## üß© Componentes Principais

### ServiceInitializer (`ServiceInitializer.js`)

**Responsabilidade**: Orquestrar a inicializa√ß√£o dos servi√ßos respeitando depend√™ncias

```javascript
// Exemplo de uso
import { serviceInitializer } from './core/initialization/ServiceInitializer';

// Inicializa todos os servi√ßos definidos em SERVICE_METADATA
await serviceInitializer.initializeServices(serviceInitializers);
```

### ServiceInitializationProvider (`ServiceInitializationProvider.js`)

**Responsabilidade**: Fornecer contexto React para estado de inicializa√ß√£o

```jsx
// Exemplo de uso
import { ServiceInitializationProvider } from './core/initialization/ServiceInitializationProvider';

function App() {
  return (
    <ServiceInitializationProvider>
      <YourApp />
    </ServiceInitializationProvider>
  );
}
```

### LoadingScreen (`LoadingScreen.js`)

**Responsabilidade**: Fornecer feedback visual durante a inicializa√ß√£o

```jsx
// Exemplo de uso
import { LoadingScreen } from './core/initialization/LoadingScreen';

function App() {
  return isInitializing ? <LoadingScreen phase="services" /> : <YourApp />;
}
```

### InitializationManager (`InitializationManager.js`)

**Responsabilidade**: Decidir quando exibir a aplica√ß√£o principal vs. tela de carregamento

```jsx
// Exemplo de uso
import { InitializationManager } from './core/initialization/InitializationManager';

function App() {
  return (
    <InitializationManager>
      <YourApp />
    </InitializationManager>
  );
}
```

### InitializationQueue (`InitializationQueue.tsx`)

**Responsabilidade**: Gerenciar fila de inicializa√ß√£o com suporte a depend√™ncias

```typescript
// Exemplo de uso
import { InitializationQueue } from './core/initialization/queue/InitializationQueue';

const queue = new InitializationQueue();
await queue.enqueue('auth', initAuth, []);
await queue.enqueue('user', initUser, ['auth']);
```

## üîÑ Fluxo de Inicializa√ß√£o

1. **Bootstrap** - Inicializa√ß√£o dos sistemas fundamentais
   - `ServiceInitializationProvider` √© montado
   - Estado de bootstrap √© definido como `initializing`
   - `coreLogger` √© inicializado
   - Estado de bootstrap √© atualizado para `ready`

2. **Servi√ßos** - Inicializa√ß√£o orquestrada dos servi√ßos
   - `serviceInitializer` constr√≥i grafo de depend√™ncias dos servi√ßos
   - Servi√ßos s√£o agrupados por fases (CORE, ESSENTIAL, COMMUNICATION, etc.)
   - Servi√ßos sem depend√™ncias pendentes s√£o inicializados em paralelo
   - Estado de inicializa√ß√£o √© atualizado e propagado via context

3. **UI** - Renderiza√ß√£o condicional
   - `InitializationManager` verifica estado de inicializa√ß√£o
   - Exibe `LoadingScreen` ou a aplica√ß√£o principal
   - `LoadingScreen` mostra progresso baseado no estado atual

## üìä Diagrama de Sequ√™ncia

```mermaid
sequenceDiagram
    participant App
    participant Provider as ServiceInitializationProvider
    participant Initializer as serviceInitializer
    participant Logger as coreLogger
    
    App->>+Provider: mount()
    Provider->>Provider: dispatch(START_BOOTSTRAP)
    Provider->>+Logger: initialize()
    Logger-->>-Provider: initialized
    Provider->>Provider: dispatch(BOOTSTRAP_SUCCESS)
    Provider->>+Initializer: initializeServices()
    Initializer->>Initializer: _buildDependencyGraph()
    Initializer->>Initializer: _getReadyServices()
    
    loop For each ready service
        Initializer->>Initializer: _initializeService()
        Initializer->>Logger: logServiceState('initializing')
        
        alt Service initialized successfully
            Initializer->>Logger: logServiceState('ready')
            Initializer->>Provider: onServiceStateChange('ready')
        else Service failed
            Initializer->>Logger: logServiceError()
            Initializer->>Provider: onServiceStateChange('failed')
        end
    end
    
    Initializer-->>-Provider: initialization results
    Provider-->>-App: isInitializationComplete
```

## üîç Grafo de Depend√™ncias

A estrutura de depend√™ncias entre servi√ßos √© definida em `SERVICE_METADATA`:

```mermaid
graph TD
    A[auth] --> B[user]
    B --> C[notifications]
    B --> D[connections]
    B --> E[messages]
    D --> F[interests]
    C --> G[caixinhas]
    D --> G
    E --> G
    F --> H[dashboard]
    G --> H
```

## üõ° Resili√™ncia e Tratamento de Erros

### Mecanismos de Resili√™ncia

- **Retry com Backoff Exponencial**: Para opera√ß√µes que podem falhar temporariamente
- **Circuit Breaker**: Previne tentativas repetidas quando um servi√ßo est√° indispon√≠vel
- **Timeout**: Limita o tempo de espera para inicializa√ß√£o de cada servi√ßo
- **Detec√ß√£o de Ciclos**: Previne deadlocks causados por depend√™ncias circulares

### Tratamento de Cen√°rios de Falha

| Cen√°rio | Comportamento |
|---------|--------------|
| Falha no Bootstrap | Tela de erro com op√ß√£o de retry |
| Falha em Servi√ßo Cr√≠tico | Interrup√ß√£o da inicializa√ß√£o, tela de erro |
| Falha em Servi√ßo N√£o-Cr√≠tico | Continua inicializa√ß√£o, funcionalidade limitada |
| Depend√™ncias N√£o Resolvidas | Timeout ap√≥s per√≠odo configurado |
| Ciclo de Depend√™ncias | Erro durante a valida√ß√£o do grafo |

## üìö API

### Hooks

#### useServiceInitialization

```javascript
const { 
  isServiceReady, 
  isServiceInitializing,
  getServiceError,
  hasCriticalFailure,
  isInitializationComplete,
  services,
  metadata,
  retryInitialization
} = useServiceInitialization();
```

### Configura√ß√£o de Servi√ßos

```javascript
// Em SERVICE_METADATA
{
  auth: {
    description: 'Authentication service provider',
    criticalPath: true,
    dependencies: [],
    timeout: 30000,
    initFn: async () => { /* l√≥gica de inicializa√ß√£o */ }
  }
}
```

### N√≠veis de Log

```javascript
// Em constants.js (LOG_LEVELS)
{
  INITIALIZATION: 'INIT',
  LIFECYCLE: 'LIFECYCLE',
  STATE: 'STATE',
  NETWORK: 'NETWORK',
  PERFORMANCE: 'PERF',
  ERROR: 'ERROR',
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARNING: 'WARNING'
}
```

## ü§ù Guia de Contribui√ß√£o

### Adicionando um Novo Servi√ßo

1. Adicione a configura√ß√£o do servi√ßo em `SERVICE_METADATA`
2. Implemente a fun√ß√£o de inicializa√ß√£o (`initFn`)
3. Defina corretamente as depend√™ncias
4. Execute os testes para garantir que n√£o h√° ciclos de depend√™ncia

### Melhores Pr√°ticas

- Servi√ßos no caminho cr√≠tico devem ter timeout mais alto
- Fun√ß√µes de inicializa√ß√£o devem ser idempotentes
- Use coreLogger para registrar eventos importantes
- Implemente l√≥gica de fallback para servi√ßos n√£o-cr√≠ticos

## üîß Troubleshooting

### Problemas Comuns

| Problema | Solu√ß√£o |
|----------|---------|
| Ciclo de Depend√™ncias | Verifique SERVICE_METADATA para depend√™ncias circulares |
| Timeout na Inicializa√ß√£o | Aumente o valor de timeout ou otimize a inicializa√ß√£o |
| Servi√ßo Falha Sempre | Verifique logs para o erro espec√≠fico e implemente fallback |
| Inicializa√ß√£o Lenta | Use o perfil de performance para identificar gargalos |

### Logs e Debugging

O sistema usa `coreLogger` para registrar eventos detalhados:

```javascript
// Verificando logs de inicializa√ß√£o
coreLogger.getLogsByType(LOG_LEVELS.INITIALIZATION);

// Verificando erros de servi√ßo
coreLogger.getLogsByType(LOG_LEVELS.ERROR);
```

---

## üìà Performance

M√©tricas de performance da inicializa√ß√£o em ambientes de produ√ß√£o:

- **Tempo M√©dio de Bootstrap**: ~250ms
- **Tempo M√©dio de Inicializa√ß√£o Completa**: ~1.2s
- **Servi√ßo Mais Lento**: user (~500ms)
- **Taxa de Retry**: <0.5%

---

## üß™ Testes

```bash
# Executar testes unit√°rios
npm run test:unit src/core/initialization

# Executar testes de integra√ß√£o
npm run test:integration src/core/initialization

# Verificar ciclos de depend√™ncia
npm run test:dependency-cycles
```

---

*Para quest√µes e suporte, entre em contato com a equipe Core em core-team@example.com*