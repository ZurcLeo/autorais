// src/utils/mercadoPagoValidation.js

/**
 * Validation utilities for MercadoPago integration
 * Following backend recommendations
 */

/**
 * Validates that the payment data follows MercadoPago requirements with enhanced security
 * @param {Object} paymentData - Payment data to validate
 * @returns {Object} Validation result with errors if any
 */
export const validatePaymentData = (paymentData) => {
  const errors = [];
  const warnings = [];

  // Import security validators
  const { 
    sanitizeMonetaryValue, 
    validateEmailSecure, 
    validateCPFSecure, 
    validateCNPJSecure,
    sanitizeInput 
  } = require('./securityValidation');

  // Enhanced amount validation
  const sanitizedAmount = sanitizeMonetaryValue(paymentData.amount);
  if (!sanitizedAmount || sanitizedAmount <= 0) {
    errors.push('Amount is required and must be greater than 0');
  }

  // Enhanced email validation
  if (!validateEmailSecure(paymentData.email)) {
    errors.push('Valid email is required');
  }

  // Enhanced name validation
  const firstName = sanitizeInput(paymentData.firstName);
  const lastName = sanitizeInput(paymentData.lastName);
  
  if (!firstName || firstName.length < 2) {
    errors.push('First name is required (minimum 2 characters)');
  }

  if (!lastName || lastName.length < 2) {
    errors.push('Last name is required (minimum 2 characters)');
  }

  if (!paymentData.identificationType || !['CPF', 'CNPJ'].includes(paymentData.identificationType)) {
    errors.push('Identification type must be CPF or CNPJ');
  }

  // Enhanced document validation
  const identificationNumber = paymentData.identificationNumber?.replace(/\D/g, '');
  if (!identificationNumber) {
    errors.push('Identification number is required');
  } else if (paymentData.identificationType === 'CPF' && !validateCPFSecure(identificationNumber)) {
    errors.push('Invalid CPF format or checksum');
  } else if (paymentData.identificationType === 'CNPJ' && !validateCNPJSecure(identificationNumber)) {
    errors.push('Invalid CNPJ format or checksum');
  }

  // Device ID validation (critical for MercadoPago)
  if (!paymentData.deviceId) {
    errors.push('Device ID is required for MercadoPago integration');
  } else if (paymentData.deviceId.startsWith('DEVICE_')) {
    warnings.push('Using fallback device ID - MercadoPago SDK may not be available');
  } else if (paymentData.deviceId.startsWith('MP_')) {
    // SDK V2 session-based device ID is acceptable
    console.log('Using MercadoPago SDK V2 session-based device ID');
  }

  // Items validation - Skip for PIX validation (not supported by backend)
  // Note: Items field removed from PIX validation endpoint

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
    summary: {
      hasDeviceId: !!paymentData.deviceId,
      deviceIdType: paymentData.deviceId?.startsWith('DEVICE_') ? 'fallback' : 
                   paymentData.deviceId?.startsWith('MP_') ? 'mercadopago_v2' : 'mercadopago'
    }
  };
};

/**
 * Creates a properly formatted payment data object following MercadoPago standards
 * @param {Object} userInfo - User information
 * @param {string} deviceId - Generated device ID
 * @param {number} amount - Payment amount
 * @param {string} accountId - Account ID for validation
 * @returns {Object} Formatted payment data
 */
export const createStandardPaymentData = (userInfo, deviceId, amount, accountId) => {
  // Import security validators
  const { 
    sanitizeMonetaryValue, 
    sanitizeInput, 
    validateEmailSecure,
    logSecureOperation 
  } = require('./securityValidation');

  // Sanitize and validate all inputs
  const sanitizedAmount = sanitizeMonetaryValue(amount);
  const sanitizedEmail = userInfo.email?.trim().toLowerCase();
  const sanitizedFirstName = sanitizeInput(userInfo.firstName);
  const sanitizedLastName = sanitizeInput(userInfo.lastName);
  const sanitizedIdNumber = userInfo.identificationNumber?.replace(/\D/g, '');

  // Validate critical fields
  if (!sanitizedAmount || !validateEmailSecure(sanitizedEmail)) {
    throw new Error('Invalid payment data provided');
  }

  // Log operation securely
  logSecureOperation('create_payment_data', {
    hasValidAmount: !!sanitizedAmount,
    hasValidEmail: !!sanitizedEmail,
    hasDeviceId: !!deviceId,
    identificationType: userInfo.identificationType
  });

  return {
    // Required fields for MercadoPago PIX validation (sanitized)
    amount: sanitizedAmount,
    description: "ValidaÃ§Ã£o de Conta - ElosCloud",
    email: sanitizedEmail,
    firstName: sanitizedFirstName,
    lastName: sanitizedLastName,
    identificationType: userInfo.identificationType,
    identificationNumber: sanitizedIdNumber,
    deviceId: deviceId // CRITICAL: Generated by MercadoPago SDK
    
    // NOTE: 'items' field removed - not supported by PIX validation endpoint
  };
};

/**
 * Logs payment data for debugging (without sensitive information)
 * @param {Object} paymentData - Payment data to log
 */
export const logPaymentDataSafely = (paymentData) => {
  const safeData = {
    amount: paymentData.amount,
    hasEmail: !!paymentData.email,
    emailDomain: paymentData.email ? paymentData.email.split('@')[1] : null,
    hasFirstName: !!paymentData.firstName,
    hasLastName: !!paymentData.lastName,
    identificationType: paymentData.identificationType,
    hasIdentificationNumber: !!paymentData.identificationNumber,
    identificationLength: paymentData.identificationNumber ? paymentData.identificationNumber.replace(/\D/g, '').length : 0,
    deviceId: paymentData.deviceId
  };

  console.log('ðŸ’³ PIX Validation Data Summary:', safeData);
  return safeData;
};