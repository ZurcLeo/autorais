//autorais-main/src/firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /usuario/{userId} {
      allow create: if request.auth != null;
      allow read: if request.auth.uid == userId || resource.data.perfilPublico == true || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
      allow update, delete: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
      allow write: if request.auth.uid == userId; // Inclui condições adicionais de escrita aqui se necessário
    }

     // Subcoleção 'compras'
      match /usuario/{userId}/compras/{compraId} {
        allow create, read, update: if request.auth.uid == userId;
      }

      // Subcoleção 'pagamentos'
      match /usuario/{userId}/pagamentos/{pagamentoId} {
        allow create, read, update: if request.auth.uid == userId;
      }
    

    // Regras para a coleção 'reservasIndex'
    match /reservasIndex/{reservationId} {
      allow read, write, create, update: if isOwnerOrAdmin(request.auth.uid);
      match /nomes/{firstName} {
        allow read, write, create, update: if isOwnerOrAdmin(request.auth.uid); 
    }
    }
    
      match /convites/{conviteId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
    }
    
          match /mail/{mailId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
    }
    
    
    match /usuario/{userId}/convites/{conviteId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }
    
match /usuario/{userId}/uploadHistory/{uploadId} {
  allow read, write, create, update: if request.auth.uid == userId;
}
    // Verifica se o usuário é o proprietário ou admin
    function isOwnerOrAdmin(uid) {
      let userDoc = get(/databases/$(database)/documents/usuario/$(uid));
      return userDoc.data.isOwnerOrAdmin || userDoc.data.isOwner;
    }

    // Regras para a coleção 'hospedagens'
    match /hospedagens/{userId}/reservas/{reservaId} {
      allow read, write, create: if isOwnerOrAdmin(request.auth.uid);
    }

    // Regras para a coleção 'usuario/hospedagens'
    match /usuario/{userId}/hospedagens/{reservaId} {
      allow read, write: if request.auth.uid == userId || isOwnerOrAdmin(request.auth.uid);
    }

    // Regras para outras coleções específicas do usuário
    match /curso/{userId} {
      allow create, update, delete, read: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
    }
    match /ferramentasDigitais/{userId} {
      allow create: if request.auth != null;
      allow create, update, delete, read: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
    }
    match /pagamentos/{userId} {
      allow create: if request.auth != null;
      allow create, update, delete, read: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
    }

    // Regras para a coleção 'conexoes' e suas subcoleções
    match /conexoes/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
      match /ativas/{docId} {
        allow read, create, update, delete: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
      }
      match /solicitadas/{docId} {
        allow create: if request.auth.uid != null;
        allow read, delete: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
        allow update: if request.auth.uid == userId || (request.auth.uid == resource.data.uid && resource.data.status in ['aprovada', 'rejeitada']) || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
      }
      match /inativas/{docId} {
        allow read, create, update, delete: if request.auth.uid == userId || get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.isOwnerOrAdmin == true;
      }
    }

    match /mensagens/{conversaId}/msgs/{messageId} {
      // Permite leitura, escrita e atualização se o usuário faz parte da conversa
      allow read, write, update: if isPartOfConversation(conversaId);
    }

// Regras para subcoleção de mídia pública
match /media/{userId}/publico/{document=**} {
  // Mídia pública pode ser lida por qualquer usuário autenticado
  allow read: if request.auth != null;
  // Apenas o proprietário pode adicionar ou alterar a mídia pública
  allow write, update: if request.auth.uid == userId;
}

// Regras para subcoleção de mídia privada
match /media/{userId}/privado/{document=**} {
  allow read: if request.auth.uid == userId || isFriend(request.auth.uid, resource.data.amigosAutorizados);
  allow write, update: if request.auth.uid == userId;
}
    // Função auxiliar para verificar se um usuário faz parte de uma conversa
    function isPartOfConversation(conversaId) {
      let userIds = conversaId.split('_');
      return (userIds[0] == request.auth.uid || userIds[1] == request.auth.uid);
    }

    // Funções de auxílio para verificar relacionamentos e visibilidade de postagens
    function isFriend(uid, ownerId) {
      let ownerDoc = get(/databases/$(database)/documents/usuario/$(ownerId));
      return ownerDoc.data.amigos && ownerDoc.data.amigos.hasAny([uid]);
    }
    
    function isPublicProfile (uid) {
    let publicProfile = get(/databases/$(database)/documents/publico/userIds);
    return publicProfile.data.userIds.hasAny([uid]) && request.auth.uid != null;
    }
    
match /postagens/{allPaths=**} {
 			allow read: if resource.data.visibilidade == 'publico' || resource.data.usuarioId == request.auth.uid || isFriend(request.auth.uid, resource.data.usuarioId);
      allow write: if request.auth != null && request.auth.uid == resource.data.usuarioId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.usuarioId;
}

match /postagens/{postId}/{allPaths=**} {
   allow read, update, write, create: if request.auth != null;
}

match /postagens/{postId}/gifts/{allPaths=**} {
   allow read, update, write, create: if request.auth != null;
}

match /postagens/{postId}/reacoes/reacoesData {
  allow read, update, write, create: if request.auth != null;
}

match /postagens/{postId}/comentarios/{commentId} {
    allow read, write, create: if request.auth != null;
  }

 match /presentes/{giftId} {
    allow read: if true;
    allow create, update, delete: if get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.tipoDeConta == 'suporte';
  }


 match /presentes/{allPaths=**} {
    allow read: if true;
    allow create, update, delete: if get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.tipoDeConta == 'suporte';
  }

match /publico/userIds/{allPaths=**} {
allow read: if true;
    allow create: if request.auth != null;
    allow delete, update: if isPublicProfile(request.auth.uid)    
    }
    
match /publico/imgs/{allPaths=**} {
    allow read, write, update: if request.auth != null;
    }    
    
    // Regra para permitir a leitura/escrita de notificações privadas
    match /notificacoes/{userId}/notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Regra para permitir a leitura de notificações globais
    match /notificacoes/global/notifications/{notificationId} {
    allow read, write: if request.auth != null;

    }
    
        // Regra para a coleção de streams ao vivo
    match /liveStreams/{userId} {
      
      // Permite leitura para todos os usuários autenticados
      allow read: if request.auth != null;

      // Permite escrita se o usuário é o proprietário do documento ou se é um administrador
      allow write: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true);
    }
    
        match /lives/{liveId}/mensagens/{messageId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
    
    // Regra para ofertas
    match /offers/{offerId} {
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Regra para respostas
    match /answers/{answerId} {
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }

    // Regra para candidatos
    match /candidates/{candidateId} {
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }
  }
}
